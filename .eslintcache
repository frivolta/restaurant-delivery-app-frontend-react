[{"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\index.tsx":"1","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\apollo.ts":"3","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\routers\\logged-out-router.tsx":"4","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\routers\\logged-in-router.tsx":"5","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\login.tsx":"6","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\create-account.tsx":"7","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\form-error.tsx":"8","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\button.tsx":"9","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\constants.ts":"10","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\client\\restaurants.tsx":"11","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\404.tsx":"12","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\header.tsx":"13","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\hooks\\useMe.tsx":"14","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\user\\confirm-email.tsx":"15","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\user\\edit-profile.tsx":"16","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\restaurant.tsx":"17","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\client\\search.tsx":"18","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\fragments.ts":"19","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\client\\category.tsx":"20","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\client\\restaurant.tsx":"21","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\app.tsx":"22","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\owner\\my-restaurants.tsx":"23","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\owner\\add-restaurant.tsx":"24","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\owner\\my-restaurant.tsx":"25","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\dish.tsx":"26","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\owner\\add-dish.tsx":"27","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\dish-option.tsx":"28","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\__generated__\\globalTypes.ts":"29","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\order.tsx":"30","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\driver\\dashboard.tsx":"31"},{"size":798,"mtime":1608848827872,"results":"32","hashOfConfig":"33"},{"size":425,"mtime":1608138579927,"results":"34","hashOfConfig":"33"},{"size":1589,"mtime":1609514373509,"results":"35","hashOfConfig":"33"},{"size":588,"mtime":1608595500082,"results":"36","hashOfConfig":"33"},{"size":3184,"mtime":1609515942636,"results":"37","hashOfConfig":"33"},{"size":3957,"mtime":1609064674101,"results":"38","hashOfConfig":"33"},{"size":4537,"mtime":1609174940949,"results":"39","hashOfConfig":"33"},{"size":231,"mtime":1608414922768,"results":"40","hashOfConfig":"33"},{"size":528,"mtime":1608430185113,"results":"41","hashOfConfig":"33"},{"size":46,"mtime":1608588971035,"results":"42","hashOfConfig":"33"},{"size":4075,"mtime":1608691995810,"results":"43","hashOfConfig":"33"},{"size":608,"mtime":1608595444115,"results":"44","hashOfConfig":"33"},{"size":1072,"mtime":1609353743213,"results":"45","hashOfConfig":"33"},{"size":305,"mtime":1608850334508,"results":"46","hashOfConfig":"33"},{"size":1799,"mtime":1609353743260,"results":"47","hashOfConfig":"33"},{"size":2950,"mtime":1608647979846,"results":"48","hashOfConfig":"33"},{"size":702,"mtime":1608691995810,"results":"49","hashOfConfig":"33"},{"size":2879,"mtime":1608806348486,"results":"50","hashOfConfig":"33"},{"size":967,"mtime":1608691995751,"results":"51","hashOfConfig":"33"},{"size":2686,"mtime":1608806629290,"results":"52","hashOfConfig":"33"},{"size":7114,"mtime":1609372524726,"results":"53","hashOfConfig":"33"},{"size":374,"mtime":1608848798287,"results":"54","hashOfConfig":"33"},{"size":1973,"mtime":1609288689748,"results":"55","hashOfConfig":"33"},{"size":4528,"mtime":1609371189503,"results":"56","hashOfConfig":"33"},{"size":6273,"mtime":1609371317270,"results":"57","hashOfConfig":"33"},{"size":1973,"mtime":1609353442337,"results":"58","hashOfConfig":"33"},{"size":4767,"mtime":1609353792344,"results":"59","hashOfConfig":"33"},{"size":905,"mtime":1609353476720,"results":"60","hashOfConfig":"33"},{"size":2471,"mtime":1609515487621,"results":"61","hashOfConfig":"33"},{"size":5994,"mtime":1609514033934,"results":"62","hashOfConfig":"33"},{"size":5350,"mtime":1609515734466,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"4kbgns",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\index.tsx",[],["135","136"],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\apollo.ts",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\routers\\logged-out-router.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\routers\\logged-in-router.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\login.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\create-account.tsx",["137","138"],"import { ApolloError, gql, useMutation } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { FormError } from \"../components/form-error\";\r\nimport deliveryAppLogo from \"../images/logo.svg\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Button } from \"../components/button\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { CreateAccountInput, UserRole } from \"../__generated__/globalTypes\";\r\nimport {\r\n  CreateAccountMutation,\r\n  CreateAccountMutationVariables,\r\n} from \"../__generated__/CreateAccountMutation\";\r\n\r\ninterface ICreateAccountForm {\r\n  email: string;\r\n  password: string;\r\n  role: UserRole;\r\n}\r\n\r\nexport const CREATE_ACCOUNT_MUTATION = gql`\r\n  mutation CreateAccountMutation($createAccountInput: CreateAccountInput!) {\r\n    createAccount(input: $createAccountInput) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CreateAccount = () => {\r\n  const history = useHistory();\r\n  const {\r\n    register,\r\n    getValues,\r\n    errors,\r\n    handleSubmit,\r\n    formState,\r\n  } = useForm<ICreateAccountForm>({\r\n    mode: \"onChange\",\r\n    defaultValues: { role: UserRole.Client },\r\n  });\r\n\r\n  const onError = (error: ApolloError) => {};\r\n\r\n  const onSubmit = () => {\r\n    if (!loading) {\r\n      const { email, password, role } = getValues();\r\n      if (email && password) {\r\n        createAccountMutation({\r\n          variables: { createAccountInput: { email, password, role } },\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const onCompleted = (data: CreateAccountMutation) => {\r\n    const {\r\n      createAccount: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      alert(\"Account created login now\");\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  const [\r\n    createAccountMutation,\r\n    { loading, data: createAccountMutationResult },\r\n  ] = useMutation<CreateAccountMutation, CreateAccountMutationVariables>(\r\n    CREATE_ACCOUNT_MUTATION,\r\n    { onError, onCompleted }\r\n  );\r\n\r\n  return (\r\n    <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\r\n      <Helmet>\r\n        <title>Create Account | Delivery app</title>\r\n      </Helmet>\r\n      <div className=\"w-full max-w-screen-sm flex flex-col px-5 items-center\">\r\n        <img src={deliveryAppLogo} className=\"w-52 mb-10\" alt=\"Delivery app\" />\r\n        <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\r\n          Lets's get started\r\n        </h4>\r\n        <form\r\n          className=\"grid gap-3 mt-5 w-full mb-5\"\r\n          onSubmit={handleSubmit(onSubmit)}\r\n        >\r\n          <input\r\n            ref={register({\r\n              required: \"Email is required\",\r\n              pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n            })}\r\n            name=\"email\"\r\n            required\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            className=\"input\"\r\n          />\r\n\r\n          {errors.email?.type === \"pattern\" && (\r\n            <FormError errorMessage={\"Please enter a valid email\"} />\r\n          )}\r\n          {errors.email?.message && (\r\n            <FormError errorMessage={errors.email?.message} />\r\n          )}\r\n          <input\r\n            ref={register({ required: \"Password is required\" })}\r\n            required\r\n            name=\"password\"\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            className=\"input\"\r\n          />\r\n          {errors.password?.message && (\r\n            <span className=\"font-medium text-red-500\">\r\n              <FormError errorMessage={errors.password?.message} />\r\n            </span>\r\n          )}\r\n          <select\r\n            name=\"role\"\r\n            ref={register({ required: true })}\r\n            className=\"input\"\r\n          >\r\n            {Object.keys(UserRole).map((role, index) => (\r\n              <option key={index}>{role}</option>\r\n            ))}\r\n          </select>\r\n          <Button\r\n            canClick={formState.isValid}\r\n            loading={loading}\r\n            actionText={\"Create Account\"}\r\n          />\r\n          {createAccountMutationResult?.createAccount.error && (\r\n            <FormError\r\n              errorMessage={createAccountMutationResult?.createAccount.error}\r\n            />\r\n          )}\r\n        </form>\r\n        <div>\r\n          Already have an account?{\" \"}\r\n          <Link to=\"/\" className=\"text-lime-600 hover:underline\">\r\n            Login now\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\form-error.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\button.tsx",["139"],"import React from \"react\";\r\n\r\ninterface IButtonProps {\r\n  canClick: boolean;\r\n  loading: boolean;\r\n  actionText: string;\r\n}\r\n\r\nexport const Button: React.FC<IButtonProps> = ({\r\n  canClick,\r\n  loading,\r\n  actionText,\r\n}) => (\r\n  <button\r\n    role=\"button\"\r\n    className={`text-lg font-medium focus:outline-none text-white py-4  transition-colors ${\r\n      canClick\r\n        ? \"bg-lime-600 hover:bg-lime-700\"\r\n        : \"bg-gray-300 pointer-events-none\"\r\n    }`}\r\n  >\r\n    {loading ? \"Loading...\" : actionText}\r\n  </button>\r\n);\r\n","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\constants.ts",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\client\\restaurants.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\404.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\header.tsx",["140","141"],"import { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport nuberLogo from \"../images/logo.svg\";\r\n\r\nexport const Header: React.FC = () => {\r\n  const { data, loading, error } = useMe();\r\n\r\n  return (\r\n    <>\r\n      {!data?.me.verified && (\r\n        <div className=\"bg-red-500 p-3 text-center text-base text-white\">\r\n          <span>Please verify your email.</span>\r\n        </div>\r\n      )}\r\n      <header className=\"py-4\">\r\n        <div className=\"w-full px-5 xl:px-0 max-w-screen-2xl mx-auto flex justify-between items-center\">\r\n          <Link to=\"/\">\r\n            <img src={nuberLogo} className=\"w-44\" alt=\"Delivery app\" />\r\n          </Link>\r\n          <span className=\"text-xs\">\r\n            <Link to=\"/edit-profile\">\r\n              <FontAwesomeIcon icon={faUser} className=\"text-3xl\" />\r\n            </Link>\r\n          </span>\r\n        </div>\r\n      </header>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\hooks\\useMe.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\user\\confirm-email.tsx",["142","143","144","145"],"import { useApolloClient, useMutation } from \"@apollo/client\";\r\nimport { gql } from \"@apollo/client/core\";\r\nimport React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport { useMe } from \"../../hooks/useMe\";\r\nimport { VerifyEmailInput } from \"../../__generated__/globalTypes\";\r\nimport {\r\n  verifyEmail,\r\n  verifyEmailVariables,\r\n} from \"../../__generated__/verifyEmail\";\r\n\r\nconst VERIFY_EMAIL_MUTATION = gql`\r\n  mutation verifyEmail($input: VerifyEmailInput!) {\r\n    verifyEmail(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\nexport const ConfirmEmail = () => {\r\n  const { data: userData } = useMe();\r\n\r\n  const onCompleted = (data: verifyEmail) => {\r\n    const {\r\n      verifyEmail: { ok },\r\n    } = data;\r\n    if (ok && userData?.me.id) {\r\n      client.writeFragment({\r\n        id: `User:${userData.me.id + \"\"}`,\r\n        fragment: gql`\r\n          fragment VerifiedUser on User {\r\n            verified\r\n          }\r\n        `,\r\n        data: { verified: true },\r\n      });\r\n    }\r\n  };\r\n\r\n  const [verifyEmail] = useMutation<verifyEmail, verifyEmailVariables>(\r\n    VERIFY_EMAIL_MUTATION,\r\n    { onCompleted }\r\n  );\r\n\r\n  const client = useApolloClient();\r\n  const history = useHistory();\r\n\r\n  React.useEffect(() => {\r\n    const [, code] = window.location.href.split(\"code=\");\r\n    verifyEmail({ variables: { input: { code } } });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mt-52 flex flex-col items-center justify-center\">\r\n      <Helmet>\r\n        <title>Verify Email | Nuber Eats</title>\r\n      </Helmet>\r\n      <h2 className=\"text-lg mb-1 font-medium\">Confirming email...</h2>\r\n      <h4 className=\"text-gray-700 text-sm\">\r\n        Please wait, don't close this page...\r\n      </h4>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\user\\edit-profile.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\restaurant.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\client\\search.tsx",["146","147","148"],"import { gql, useLazyQuery } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { Restaurant } from \"../../components/restaurant\";\r\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\r\nimport {\r\n  searchRestaurant,\r\n  searchRestaurantVariables,\r\n} from \"../../__generated__/searchRestaurant\";\r\n\r\nconst SEARCH_RESTAURANT = gql`\r\n  query searchRestaurant($input: SearchRestaurantInput!) {\r\n    searchRestaurant(input: $input) {\r\n      ok\r\n      error\r\n      totalPages\r\n      totalResults\r\n      restaurants {\r\n        ...RestaurantParts\r\n      }\r\n    }\r\n  }\r\n  ${RESTAURANT_FRAGMENT}\r\n`;\r\n\r\nexport const Search = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [page, setPage] = React.useState(1);\r\n  const [callQuery, { loading, data, called }] = useLazyQuery<\r\n    searchRestaurant,\r\n    searchRestaurantVariables\r\n  >(SEARCH_RESTAURANT);\r\n\r\n  React.useEffect(() => {\r\n    const [_, query] = location.search.split(\"?term=\");\r\n    if (!query) {\r\n      return history.replace(\"/\");\r\n    }\r\n    callQuery({\r\n      variables: {\r\n        input: {\r\n          page,\r\n          query,\r\n        },\r\n      },\r\n    });\r\n  }, [page]);\r\n\r\n  const onNextPageClick = () => setPage((current) => current + 1);\r\n  const onPrevPageClick = () => setPage((current) => current - 1);\r\n\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Search | Delivery app</title>\r\n      </Helmet>\r\n      {!loading && data?.searchRestaurant.restaurants && (\r\n        <div className=\"max-w-screen-2xl pb-20 mx-auto mt-8\">\r\n          <div className=\"grid mt-16 md:grid-cols-3 gap-x-5 gap-y-10\">\r\n            {data?.searchRestaurant?.restaurants?.map((restaurant) => (\r\n              <Restaurant\r\n                key={restaurant.id}\r\n                id={restaurant.id + \"\"}\r\n                coverImage={restaurant.coverImage}\r\n                name={restaurant.name}\r\n                categoryName={restaurant.category?.name}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"grid grid-cols-3 text-center max-w-md items-center mx-auto mt-10\">\r\n        {page > 1 ? (\r\n          <button\r\n            onClick={onPrevPageClick}\r\n            className=\"focus:outline-none font-medium text-2xl\"\r\n          >\r\n            &larr;\r\n          </button>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n        <span>\r\n          Page {page} of {data?.searchRestaurant.totalPages}\r\n        </span>\r\n        {page !== data?.searchRestaurant.totalPages ? (\r\n          <button\r\n            onClick={onNextPageClick}\r\n            className=\"focus:outline-none font-medium text-2xl\"\r\n          >\r\n            &rarr;\r\n          </button>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\fragments.ts",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\client\\category.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\client\\restaurant.tsx",["149","150","151"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\r\nimport React, { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Dish } from \"../../components/dish\";\r\nimport { DishOption } from \"../../components/dish-option\";\r\nimport { DISH_FRAGMENT, RESTAURANT_FRAGMENT } from \"../../fragments\";\r\nimport {\r\n  createOrder,\r\n  createOrderVariables,\r\n} from \"../../__generated__/createOrder\";\r\nimport { CreateOrderItemInput } from \"../../__generated__/globalTypes\";\r\nimport {\r\n  restaurant,\r\n  restaurantVariables,\r\n} from \"../../__generated__/restaurant\";\r\n\r\nconst RESTAURANT_QUERY = gql`\r\n  query restaurant($input: RestaurantInput!) {\r\n    restaurant(input: $input) {\r\n      ok\r\n      error\r\n      restaurant {\r\n        ...RestaurantParts\r\n        menu {\r\n          ...DishParts\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${RESTAURANT_FRAGMENT}\r\n  ${DISH_FRAGMENT}\r\n`;\r\n\r\nconst CREATE_ORDER_MUTATION = gql`\r\n  mutation createOrder($input: CreateOrderInput!) {\r\n    createOrder(input: $input) {\r\n      ok\r\n      error\r\n      orderId\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IRestaurantParams {\r\n  id: string;\r\n}\r\n\r\nexport const Restaurant = () => {\r\n  const params = useParams<IRestaurantParams>();\r\n  const { loading, data } = useQuery<restaurant, restaurantVariables>(\r\n    RESTAURANT_QUERY,\r\n    {\r\n      variables: {\r\n        input: {\r\n          restaurantId: +params.id,\r\n        },\r\n      },\r\n    }\r\n  );\r\n  const [orderStarted, setOrderStarted] = useState(false);\r\n  const [orderItems, setOrderItems] = useState<CreateOrderItemInput[]>([]);\r\n  const triggerStartOrder = () => {\r\n    setOrderStarted(true);\r\n  };\r\n  const getItem = (dishId: number) => {\r\n    return orderItems.find((order) => order.dishId === dishId);\r\n  };\r\n  const isSelected = (dishId: number) => {\r\n    return Boolean(getItem(dishId));\r\n  };\r\n  const addItemToOrder = (dishId: number) => {\r\n    if (isSelected(dishId)) {\r\n      return;\r\n    }\r\n    setOrderItems((current) => [{ dishId, options: [] }, ...current]);\r\n  };\r\n  const removeFromOrder = (dishId: number) => {\r\n    setOrderItems((current) =>\r\n      current.filter((dish) => dish.dishId !== dishId)\r\n    );\r\n  };\r\n  const addOptionToItem = (dishId: number, optionName: string) => {\r\n    if (!isSelected(dishId)) {\r\n      return;\r\n    }\r\n    const oldItem = getItem(dishId);\r\n    if (oldItem) {\r\n      const hasOption = Boolean(\r\n        oldItem.options?.find((aOption) => aOption.name == optionName)\r\n      );\r\n      if (!hasOption) {\r\n        removeFromOrder(dishId);\r\n        setOrderItems((current) => [\r\n          { dishId, options: [{ name: optionName }, ...oldItem.options!] },\r\n          ...current,\r\n        ]);\r\n      }\r\n    }\r\n  };\r\n  const removeOptionFromItem = (dishId: number, optionName: string) => {\r\n    if (!isSelected(dishId)) {\r\n      return;\r\n    }\r\n    const oldItem = getItem(dishId);\r\n    if (oldItem) {\r\n      removeFromOrder(dishId);\r\n      setOrderItems((current) => [\r\n        {\r\n          dishId,\r\n          options: oldItem.options?.filter(\r\n            (option) => option.name !== optionName\r\n          ),\r\n        },\r\n        ...current,\r\n      ]);\r\n      return;\r\n    }\r\n  };\r\n  const getOptionFromItem = (\r\n    item: CreateOrderItemInput,\r\n    optionName: string\r\n  ) => {\r\n    return item.options?.find((option) => option.name === optionName);\r\n  };\r\n\r\n  const isOptionSelected = (dishId: number, optionName: string) => {\r\n    const item = getItem(dishId);\r\n    if (item) {\r\n      return Boolean(getOptionFromItem(item, optionName));\r\n    }\r\n    return false;\r\n  };\r\n  const triggerCancelOrder = () => {\r\n    setOrderStarted(false);\r\n    setOrderItems([]);\r\n  };\r\n  const history = useHistory();\r\n  const onCompleted = (data: createOrder) => {\r\n    const {\r\n      createOrder: { ok, orderId },\r\n    } = data;\r\n    if (data.createOrder.ok) {\r\n      history.push(`/orders/${orderId}`);\r\n    }\r\n  };\r\n  const [createOrderMutation, { loading: placingOrder }] = useMutation<\r\n    createOrder,\r\n    createOrderVariables\r\n  >(CREATE_ORDER_MUTATION, {\r\n    onCompleted,\r\n  });\r\n  const triggerConfirmOrder = () => {\r\n    if (placingOrder) {\r\n      return;\r\n    }\r\n    if (orderItems.length === 0) {\r\n      alert(\"Can't place empty order\");\r\n      return;\r\n    }\r\n    const ok = window.confirm(\"You are about to place an order\");\r\n    if (ok) {\r\n      createOrderMutation({\r\n        variables: {\r\n          input: {\r\n            restaurantId: +params.id,\r\n            items: orderItems,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>{data?.restaurant.restaurant?.name || \"\"} | Delivery app</title>\r\n      </Helmet>\r\n      <div\r\n        className=\" bg-gray-800 bg-center bg-cover py-48\"\r\n        style={{\r\n          backgroundImage: `url(${data?.restaurant.restaurant?.coverImage})`,\r\n        }}\r\n      >\r\n        <div className=\"bg-white xl:w-3/12 py-8 pl-48\">\r\n          <h4 className=\"text-4xl mb-3\">{data?.restaurant.restaurant?.name}</h4>\r\n          <h5 className=\"text-sm font-light mb-2\">\r\n            {data?.restaurant.restaurant?.category?.name}\r\n          </h5>\r\n          <h6 className=\"text-sm font-light\">\r\n            {data?.restaurant.restaurant?.address}\r\n          </h6>\r\n        </div>\r\n      </div>\r\n      <div className=\"container pb-32 flex flex-col items-end mt-20\">\r\n        {!orderStarted && (\r\n          <button onClick={triggerStartOrder} className=\"btn px-10\">\r\n            Start Order\r\n          </button>\r\n        )}\r\n        {orderStarted && (\r\n          <div className=\"flex items-center\">\r\n            <button onClick={triggerConfirmOrder} className=\"btn px-10 mr-3\">\r\n              Confirm Order\r\n            </button>\r\n            <button\r\n              onClick={triggerCancelOrder}\r\n              className=\"btn px-10 bg-black hover:bg-black\"\r\n            >\r\n              Cancel Order\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"w-full grid mt-16 md:grid-cols-3 gap-x-5 gap-y-10\">\r\n          {data?.restaurant.restaurant?.menu.map((dish, index) => (\r\n            <Dish\r\n              isSelected={isSelected(dish.id)}\r\n              id={dish.id}\r\n              orderStarted={orderStarted}\r\n              key={index}\r\n              name={dish.name}\r\n              description={dish.description}\r\n              price={dish.price}\r\n              isCustomer={true}\r\n              options={dish.options}\r\n              addItemToOrder={addItemToOrder}\r\n              removeFromOrder={removeFromOrder}\r\n            >\r\n              {dish.options?.map((option, index) => (\r\n                <DishOption\r\n                  key={index}\r\n                  dishId={dish.id}\r\n                  isSelected={isOptionSelected(dish.id, option.name)}\r\n                  name={option.name}\r\n                  extra={option.extra}\r\n                  addOptionToItem={addOptionToItem}\r\n                  removeOptionFromItem={removeOptionFromItem}\r\n                />\r\n              ))}\r\n            </Dish>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\app.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\owner\\my-restaurants.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\owner\\add-restaurant.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\owner\\my-restaurant.tsx",["152","153"],"import { gql, useMutation, useQuery, useSubscription } from \"@apollo/client\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Dish } from \"../../components/dish\";\r\nimport {\r\n  VictoryAxis,\r\n  VictoryChart,\r\n  VictoryLabel,\r\n  VictoryLine,\r\n  VictoryTheme,\r\n  VictoryTooltip,\r\n  VictoryVoronoiContainer,\r\n} from \"victory\";\r\nimport {\r\n  DISH_FRAGMENT,\r\n  ORDERS_FRAGMENT,\r\n  FULL_ORDER_FRAGMENT,\r\n  RESTAURANT_FRAGMENT,\r\n} from \"../../fragments\";\r\nimport { useMe } from \"../../hooks/useMe\";\r\nimport {\r\n  createPayment,\r\n  createPaymentVariables,\r\n} from \"../../__generated__/createPayment\";\r\nimport {\r\n  myRestaurant,\r\n  myRestaurantVariables,\r\n} from \"../../__generated__/myRestaurant\";\r\nimport { pendingOrders } from \"../../__generated__/pendingOrders\";\r\n\r\nexport const MY_RESTAURANT_QUERY = gql`\r\n  query myRestaurant($input: MyRestaurantInput!) {\r\n    myRestaurant(input: $input) {\r\n      ok\r\n      error\r\n      restaurant {\r\n        ...RestaurantParts\r\n        menu {\r\n          ...DishParts\r\n        }\r\n        orders {\r\n          ...OrderParts\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${RESTAURANT_FRAGMENT}\r\n  ${DISH_FRAGMENT}\r\n  ${ORDERS_FRAGMENT}\r\n`;\r\n\r\nconst CREATE_PAYMENT_MUTATION = gql`\r\n  mutation createPayment($input: CreatePaymentInput!) {\r\n    createPayment(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nconst PENDING_ORDERS_SUBSCRIPTION = gql`\r\n  subscription pendingOrders {\r\n    pendingOrders {\r\n      ...FullOrderParts\r\n    }\r\n  }\r\n  ${FULL_ORDER_FRAGMENT}\r\n`;\r\n\r\ninterface IParams {\r\n  id: string;\r\n}\r\n\r\nexport const MyRestaurant = () => {\r\n  const { id } = useParams<IParams>();\r\n  const { data } = useQuery<myRestaurant, myRestaurantVariables>(\r\n    MY_RESTAURANT_QUERY,\r\n    {\r\n      variables: {\r\n        input: {\r\n          id: +id,\r\n        },\r\n      },\r\n    }\r\n  );\r\n  const onCompleted = (data: createPayment) => {\r\n    if (data.createPayment.ok) {\r\n      alert(\"Your restaurant is being promoted!\");\r\n    }\r\n  };\r\n  const [createPaymentMutation, { loading }] = useMutation<\r\n    createPayment,\r\n    createPaymentVariables\r\n  >(CREATE_PAYMENT_MUTATION, {\r\n    onCompleted,\r\n  });\r\n  const { data: userData } = useMe();\r\n  const triggerPaddle = () => {\r\n    if (userData?.me.email) {\r\n      // @ts-ignore\r\n      window.Paddle.Setup({ vendor: 0 });\r\n      // @ts-ignore\r\n      window.Paddle.Checkout.open({\r\n        product: 0,\r\n        email: userData.me.email,\r\n        successCallback: (data: any) => {\r\n          createPaymentMutation({\r\n            variables: {\r\n              input: {\r\n                transactionId: data.checkout.id,\r\n                restaurantId: +id,\r\n              },\r\n            },\r\n          });\r\n        },\r\n      });\r\n    }\r\n  };\r\n  const { data: subscriptionData } = useSubscription<pendingOrders>(\r\n    PENDING_ORDERS_SUBSCRIPTION\r\n  );\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    if (subscriptionData?.pendingOrders.id) {\r\n      history.push(`/orders/${subscriptionData.pendingOrders.id}`);\r\n    }\r\n  }, [subscriptionData]);\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>\r\n          {data?.myRestaurant.restaurant?.name || \"Loading...\"} | Delivery app\r\n        </title>\r\n        <script src=\"https://cdn.paddle.com/paddle/paddle.js\"></script>\r\n      </Helmet>\r\n      <div className=\"checkout-container\"></div>\r\n      <div\r\n        className=\"  bg-gray-700  py-28 bg-center bg-cover\"\r\n        style={{\r\n          backgroundImage: `url(${data?.myRestaurant.restaurant?.coverImage})`,\r\n        }}\r\n      ></div>\r\n      <div className=\"container mt-10\">\r\n        <h2 className=\"text-4xl font-medium mb-10\">\r\n          {data?.myRestaurant.restaurant?.name || \"Loading...\"}\r\n        </h2>\r\n        <Link\r\n          to={`/restaurants/${id}/add-dish`}\r\n          className=\" mr-8 text-white bg-gray-800 py-3 px-10\"\r\n        >\r\n          Add Dish &rarr;\r\n        </Link>\r\n        <span\r\n          onClick={triggerPaddle}\r\n          className=\" cursor-pointer text-white bg-lime-700 py-3 px-10\"\r\n        >\r\n          Buy Promotion &rarr;\r\n        </span>\r\n        <div className=\"mt-10\">\r\n          {data?.myRestaurant.restaurant?.menu.length === 0 ? (\r\n            <h4 className=\"text-xl mb-5\">Please upload a dish!</h4>\r\n          ) : (\r\n            <div className=\"grid mt-16 md:grid-cols-3 gap-x-5 gap-y-10\">\r\n              {data?.myRestaurant.restaurant?.menu.map((dish, index) => (\r\n                <Dish\r\n                  key={index}\r\n                  name={dish.name}\r\n                  description={dish.description}\r\n                  price={dish.price}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"mt-20 mb-10\">\r\n          <h4 className=\"text-center text-2xl font-medium\">Sales</h4>\r\n          <div className=\"  mt-10\">\r\n            <VictoryChart\r\n              height={500}\r\n              theme={VictoryTheme.material}\r\n              width={window.innerWidth}\r\n              domainPadding={50}\r\n              containerComponent={<VictoryVoronoiContainer />}\r\n            >\r\n              <VictoryLine\r\n                labels={({ datum }) => `$${datum.y}`}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    style={{ fontSize: 18 } as any}\r\n                    renderInPortal\r\n                    dy={-20}\r\n                  />\r\n                }\r\n                data={data?.myRestaurant.restaurant?.orders.map((order) => ({\r\n                  x: order.createdAt,\r\n                  y: order.total,\r\n                }))}\r\n                interpolation=\"natural\"\r\n                style={{\r\n                  data: {\r\n                    strokeWidth: 5,\r\n                  },\r\n                }}\r\n              />\r\n              <VictoryAxis\r\n                tickLabelComponent={<VictoryLabel renderInPortal />}\r\n                style={{\r\n                  tickLabels: {\r\n                    fontSize: 20,\r\n                  } as any,\r\n                }}\r\n                tickFormat={(tick) => new Date(tick).toLocaleDateString(\"ko\")}\r\n              />\r\n            </VictoryChart>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\dish.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\owner\\add-dish.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\components\\dish-option.tsx",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\__generated__\\globalTypes.ts",[],"C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\order.tsx",["154","155","156"],"import { gql, useMutation, useQuery, useSubscription } from \"@apollo/client\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { FULL_ORDER_FRAGMENT } from \"../fragments\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport { editOrder, editOrderVariables } from \"../__generated__/editOrder\";\r\nimport { getOrder, getOrderVariables } from \"../__generated__/getOrder\";\r\nimport { OrderStatus, UserRole } from \"../__generated__/globalTypes\";\r\nimport {\r\n  orderUpdates,\r\n  orderUpdatesVariables,\r\n} from \"../__generated__/orderUpdates\";\r\n\r\nconst GET_ORDER = gql`\r\n  query getOrder($input: GetOrderInput!) {\r\n    getOrder(input: $input) {\r\n      ok\r\n      error\r\n      order {\r\n        ...FullOrderParts\r\n      }\r\n    }\r\n  }\r\n  ${FULL_ORDER_FRAGMENT}\r\n`;\r\n\r\nconst ORDER_SUBSCRIPTION = gql`\r\n  subscription orderUpdates($input: OrderUpdatesInput!) {\r\n    orderUpdates(input: $input) {\r\n      ...FullOrderParts\r\n    }\r\n  }\r\n  ${FULL_ORDER_FRAGMENT}\r\n`;\r\n\r\nconst EDIT_ORDER = gql`\r\n  mutation editOrder($input: EditOrderInput!) {\r\n    editOrder(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IParams {\r\n  id: string;\r\n}\r\n\r\nexport const Order = () => {\r\n  const params = useParams<IParams>();\r\n  const { data: userData } = useMe();\r\n  const [editOrderMutation] = useMutation<editOrder, editOrderVariables>(\r\n    EDIT_ORDER\r\n  );\r\n  const { data, subscribeToMore } = useQuery<getOrder, getOrderVariables>(\r\n    GET_ORDER,\r\n    {\r\n      variables: {\r\n        input: {\r\n          id: +params.id,\r\n        },\r\n      },\r\n    }\r\n  );\r\n  useEffect(() => {\r\n    if (data?.getOrder.ok) {\r\n      subscribeToMore({\r\n        document: ORDER_SUBSCRIPTION,\r\n        variables: {\r\n          input: {\r\n            id: +params.id,\r\n          },\r\n        },\r\n        updateQuery: (\r\n          prev,\r\n          {\r\n            subscriptionData: { data },\r\n          }: { subscriptionData: { data: orderUpdates } }\r\n        ) => {\r\n          if (!data) return prev;\r\n          return {\r\n            getOrder: {\r\n              ...prev.getOrder,\r\n              order: {\r\n                ...data.orderUpdates,\r\n              },\r\n            },\r\n          };\r\n        },\r\n      });\r\n    }\r\n  }, [data]);\r\n  const onButtonClick = (newStatus: OrderStatus) => {\r\n    editOrderMutation({\r\n      variables: {\r\n        input: {\r\n          id: +params.id,\r\n          status: newStatus,\r\n        },\r\n      },\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"mt-32 container flex justify-center\">\r\n      <Helmet>\r\n        <title>Order #{params.id} | Nuber Eats</title>\r\n      </Helmet>\r\n      <div className=\"border border-gray-800 w-full max-w-screen-sm flex flex-col justify-center\">\r\n        <h4 className=\"bg-gray-800 w-full py-5 text-white text-center text-xl\">\r\n          Order #{params.id}\r\n        </h4>\r\n        <h5 className=\"p-5 pt-10 text-3xl text-center \">\r\n          ${data?.getOrder.order?.total}\r\n        </h5>\r\n        <div className=\"p-5 text-xl grid gap-6\">\r\n          <div className=\"border-t pt-5 border-gray-700\">\r\n            Prepared By:{\" \"}\r\n            <span className=\"font-medium\">\r\n              {data?.getOrder.order?.restaurant?.name}\r\n            </span>\r\n          </div>\r\n          <div className=\"border-t pt-5 border-gray-700 \">\r\n            Deliver To:{\" \"}\r\n            <span className=\"font-medium\">\r\n              {data?.getOrder.order?.customer?.email}\r\n            </span>\r\n          </div>\r\n          <div className=\"border-t border-b py-5 border-gray-700\">\r\n            Driver:{\" \"}\r\n            <span className=\"font-medium\">\r\n              {data?.getOrder.order?.driver?.email || \"Not yet.\"}\r\n            </span>\r\n          </div>\r\n          {userData?.me.role === \"Client\" && (\r\n            <span className=\" text-center mt-5 mb-3  text-2xl text-lime-600\">\r\n              Status: {data?.getOrder.order?.status}\r\n            </span>\r\n          )}\r\n          {userData?.me.role === UserRole.Owner && (\r\n            <>\r\n              {data?.getOrder.order?.status === OrderStatus.Pending && (\r\n                <button\r\n                  onClick={() => onButtonClick(OrderStatus.Cooking)}\r\n                  className=\"btn\"\r\n                >\r\n                  Accept Order\r\n                </button>\r\n              )}\r\n              {data?.getOrder.order?.status === OrderStatus.Cooking && (\r\n                <button\r\n                  onClick={() => onButtonClick(OrderStatus.Cooked)}\r\n                  className=\"btn\"\r\n                >\r\n                  Order Cooked\r\n                </button>\r\n              )}\r\n              {data?.getOrder.order?.status !== OrderStatus.Cooking &&\r\n                data?.getOrder.order?.status !== OrderStatus.Pending && (\r\n                  <span className=\" text-center mt-5 mb-3  text-2xl text-lime-600\">\r\n                    Status: {data?.getOrder.order?.status}\r\n                  </span>\r\n                )}\r\n            </>\r\n          )}\r\n          {userData?.me.role === UserRole.Delivery && (\r\n            <>\r\n              {data?.getOrder.order?.status === OrderStatus.Cooked && (\r\n                <button\r\n                  onClick={() => onButtonClick(OrderStatus.PickedUp)}\r\n                  className=\"btn\"\r\n                >\r\n                  Picked Up\r\n                </button>\r\n              )}\r\n              {data?.getOrder.order?.status === OrderStatus.PickedUp && (\r\n                <button\r\n                  onClick={() => onButtonClick(OrderStatus.Delivered)}\r\n                  className=\"btn\"\r\n                >\r\n                  Order Delivered\r\n                </button>\r\n              )}\r\n            </>\r\n          )}\r\n          {data?.getOrder.order?.status === OrderStatus.Delivered && (\r\n            <span className=\" text-center mt-5 mb-3  text-2xl text-lime-600\">\r\n              Thank you for using Nuber Eats\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\rivol\\Desktop\\Sites\\Apps\\uber-eats\\uber-eats-frontend\\src\\pages\\driver\\dashboard.tsx",["157","158","159","160"],{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":9,"column":10,"nodeType":"167","messageId":"168","endLine":9,"endColumn":28},{"ruleId":"165","severity":1,"message":"169","line":58,"column":28,"nodeType":"167","messageId":"168","endLine":58,"endColumn":33},{"ruleId":"170","severity":1,"message":"171","line":14,"column":3,"nodeType":"172","endLine":21,"endColumn":4},{"ruleId":"165","severity":1,"message":"173","line":9,"column":17,"nodeType":"167","messageId":"168","endLine":9,"endColumn":24},{"ruleId":"165","severity":1,"message":"169","line":9,"column":26,"nodeType":"167","messageId":"168","endLine":9,"endColumn":31},{"ruleId":"165","severity":1,"message":"174","line":5,"column":22,"nodeType":"167","messageId":"168","endLine":5,"endColumn":33},{"ruleId":"165","severity":1,"message":"175","line":7,"column":10,"nodeType":"167","messageId":"168","endLine":7,"endColumn":26},{"ruleId":"165","severity":1,"message":"176","line":47,"column":9,"nodeType":"167","messageId":"168","endLine":47,"endColumn":16},{"ruleId":"177","severity":1,"message":"178","line":52,"column":6,"nodeType":"179","endLine":52,"endColumn":8,"suggestions":"180"},{"ruleId":"165","severity":1,"message":"181","line":31,"column":38,"nodeType":"167","messageId":"168","endLine":31,"endColumn":44},{"ruleId":"165","severity":1,"message":"182","line":37,"column":12,"nodeType":"167","messageId":"168","endLine":37,"endColumn":13},{"ruleId":"177","severity":1,"message":"183","line":49,"column":6,"nodeType":"179","endLine":49,"endColumn":12,"suggestions":"184"},{"ruleId":"165","severity":1,"message":"173","line":51,"column":11,"nodeType":"167","messageId":"168","endLine":51,"endColumn":18},{"ruleId":"185","severity":1,"message":"186","line":90,"column":57,"nodeType":"187","messageId":"188","endLine":90,"endColumn":59},{"ruleId":"165","severity":1,"message":"189","line":141,"column":22,"nodeType":"167","messageId":"168","endLine":141,"endColumn":24},{"ruleId":"165","severity":1,"message":"173","line":92,"column":35,"nodeType":"167","messageId":"168","endLine":92,"endColumn":42},{"ruleId":"177","severity":1,"message":"190","line":128,"column":6,"nodeType":"179","endLine":128,"endColumn":24,"suggestions":"191"},{"ruleId":"165","severity":1,"message":"192","line":1,"column":38,"nodeType":"167","messageId":"168","endLine":1,"endColumn":53},{"ruleId":"165","severity":1,"message":"193","line":12,"column":3,"nodeType":"167","messageId":"168","endLine":12,"endColumn":24},{"ruleId":"177","severity":1,"message":"194","line":93,"column":6,"nodeType":"179","endLine":93,"endColumn":12,"suggestions":"195"},{"ruleId":"165","severity":1,"message":"196","line":6,"column":10,"nodeType":"167","messageId":"168","endLine":6,"endColumn":14},{"ruleId":"165","severity":1,"message":"197","line":37,"column":7,"nodeType":"167","messageId":"168","endLine":37,"endColumn":37},{"ruleId":"177","severity":1,"message":"198","line":69,"column":6,"nodeType":"179","endLine":69,"endColumn":42,"suggestions":"199"},{"ruleId":"177","severity":1,"message":"200","line":115,"column":6,"nodeType":"179","endLine":115,"endColumn":25,"suggestions":"201"},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"@typescript-eslint/no-unused-vars","'CreateAccountInput' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","'loading' is assigned a value but never used.","'useLocation' is defined but never used.","'VerifyEmailInput' is defined but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'verifyEmail'. Either include it or remove the dependency array.","ArrayExpression",["204"],"'called' is assigned a value but never used.","'_' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'callQuery', 'history', and 'location.search'. Either include them or remove the dependency array.",["205"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ok' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["206"],"'useSubscription' is defined but never used.","'orderUpdatesVariables' is defined but never used.","React Hook useEffect has missing dependencies: 'params.id' and 'subscribeToMore'. Either include them or remove the dependency array.",["207"],"'Link' is defined but never used.","'Driver' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'map' and 'maps'. Either include them or remove the dependency array.",["208"],"React Hook useEffect has a missing dependency: 'makeRoute'. Either include it or remove the dependency array.",["209"],"no-global-assign","no-unsafe-negation",{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},"Update the dependencies array to be: [verifyEmail]",{"range":"222","text":"223"},"Update the dependencies array to be: [callQuery, history, location.search, page]",{"range":"224","text":"225"},"Update the dependencies array to be: [history, subscriptionData]",{"range":"226","text":"227"},"Update the dependencies array to be: [data, params.id, subscribeToMore]",{"range":"228","text":"229"},"Update the dependencies array to be: [driverCoords.lat, driverCoords.lng, map, maps]",{"range":"230","text":"231"},"Update the dependencies array to be: [coockedOrdersData, makeRoute]",{"range":"232","text":"233"},[1422,1424],"[verifyEmail]",[1270,1276],"[callQuery, history, location.search, page]",[3105,3123],"[history, subscriptionData]",[2274,2280],"[data, params.id, subscribeToMore]",[1982,2018],"[driverCoords.lat, driverCoords.lng, map, maps]",[3351,3370],"[coockedOrdersData, makeRoute]"]